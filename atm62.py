import math
import numpy as np
import sys

class atm62:

#  return atmospheric properties (1962 model)

#  method returnConditions(h)

#  inputs:
#    h        height (cm)

#  output:
#    rho      density (Kg/m**3)
    
#  other possible outputs:
#    temp     temperature (deg K)
#    press    pressure (Pa (pascal))
#    rho      density (Kg/m**3)
#    sos      speed of sound (m/s)
#    visc     dynamic viscosity (Km/m-sec)
#    visck    kinematic viscosity (m2/s)
#    fmp      free mean path (m)
#    g        acceleration due to gravity (m/s)
#    hs       scale height (Km)


   def __init__(self):

#  atmospheric parameter tables
#  'cheat' by padding fortran arrays with a 0 in the[0] location :)

      self.rhoa_blo120 = np.array([ 0.0,\
                        1.22500E-03,1.00700E-03,8.19400E-04,6.60100E-04,5.25800E-04,4.13500E-04,\
                        3.11900E-04,2.27900E-04,1.66500E-04,1.21700E-04,8.89100E-05,6.45100E-05,\
                        4.69400E-05,3.42600E-05,2.50800E-05,1.84100E-05,1.35600E-05,9.88700E-06,\
                        7.25800E-06,5.36700E-06,3.99600E-06,2.99500E-06,2.25900E-06,1.71400E-06,\
                        1.31700E-06,1.04100E-06,8.27100E-07,6.54300E-07,5.15100E-07,4.03400E-07,\
                        3.14200E-07,2.43300E-07,1.87300E-07,1.43300E-07,1.09000E-07,8.23400E-08,\
                        6.19900E-08,4.62900E-08,3.42700E-08,2.51300E-08,1.82500E-08,1.27600E-08,\
                        8.92600E-09,6.24500E-09,4.36900E-09,3.05800E-09,2.09100E-09,1.44500E-09,\
                        1.00900E-09,7.11400E-10,5.06200E-10,3.57000E-10,2.55700E-10,1.85800E-10,\
                        1.36700E-10,1.01900E-10,7.35400E-11,5.44900E-11,4.12700E-11,3.18600E-11,\
                        2.50100E-11])

      self.hsa_blo120  = np.array([ 0.0,\
                        10.42332,  9.94719,  9.47105,  9.01609,  8.55187,  7.65934,\
                        6.71422,  6.37260,  6.37605,  6.37582,  6.30181,  6.26219,\
                        6.32070,  6.38163,  6.44035,  6.50463,  6.43425,  6.39980,\
                        6.54716,  6.70230,  6.85724,  7.01297,  7.16699,  7.41337,\
                        8.02169,  8.59871,  8.61380,  8.44658,  8.27066,  8.09174,\
                        7.91087,  7.73219,  7.55637,  7.38875,  7.21913,  7.08749,\
                        6.94528,  6.74874,  6.54811,  6.34815,  5.90191,  5.59287,\
                        5.59805,  5.59884,  5.60208,  5.42821,  5.33581,  5.48936,\
                        5.64470,  5.79892,  5.80131,  5.85714,  6.12496,  6.38757,\
                        6.65913,  6.45204,  6.39003,  6.92409,  7.45343,  7.98626,\
                        8.30000])

      self.tempa_blo120 = np.array([ 0.0,\
                          288.2,275.2,262.2,249.2,236.2,223.3,216.7,216.7,216.7,\
                          216.7,216.7,218.6,220.6,222.5,224.5,226.5,228.5,233.7,\
                          239.3,244.8,250.4,255.9,261.4,266.9,270.7,271.0,265.5,\
                          259.9,254.4,248.8,243.3,238.0,232.6,227.3,221.9,216.6,\
                          210.5,204.4,198.2,192.1,186.0,186.0,185.9,185.9,185.9,\
                          185.8,190.9,195.9,200.4,204.4,208.1,215.7,224.6,233.4,\
                          242.3,251.1,271.9,292.7,313.1,334.0,355.0])

      self.thePower_abv120 = 8.055031222575

      self.rhoa_abv120 = np.array([0.0, \
                        2.49000E-11,8.71000E-12,4.04600E-12,2.17600E-12,1.28100E-12,8.02700E-13,\
                        5.28300E-13,3.61700E-13,2.55700E-13,1.85700E-13,1.37900E-13,1.04300E-13,\
                        8.01800E-14,6.24900E-14,4.92800E-14,3.92700E-14,3.15800E-14,2.56000E-14,\
                        2.09000E-14,1.42000E-14,9.85200E-15,6.95400E-15,4.97900E-15,3.60700E-15,\
                        2.63500E-15,1.94500E-15,1.44700E-15,1.08300E-15,8.15400E-16,6.17100E-16,\
                        4.69300E-16,3.58400E-16,2.75000E-16,2.11900E-16,1.64000E-16,1.27400E-16,\
                        9.95200E-17,7.81000E-17,6.16100E-17,4.88800E-17,3.90100E-17,3.13500E-17,\
                        2.53700E-17,2.06800E-17])

      self.hsa_abv120 = np.array([0.0, \
                        8.30000,  11.00631,  14.41978,  17.38998,  20.05490,  22.58019,\
                       25.08888,  27.56114,  29.99928,  32.38992,  34.67039,  36.88304,\
                       39.04231,  41.08836,  43.05282,  44.94439,  46.74334,  48.45256,\
                       50.04491,  53.18621,  56.02830,  58.61274,  60.93468,  62.85890,\
                       64.76533,  66.73443,  68.31453,  69.73878,  71.11627,  72.40649,\
                       73.61312,  74.84034,  76.11288,  77.38372,  78.61903,  80.07882,\
                       81.74247,  83.41424,  85.35670,  87.52617,  90.05883,  92.96906,\
                       96.14294,  99.31681])

      self.tempa_abv120 = np.array([0.0, \
                          355.0, 477.0, 573.0, 652.0, 721.0, 783.0, 839.0, 889.0,\
                          933.0, 970.0,1003.0,1032.0,1056.0,1076.0,1094.0,1109.0,\
                         1122.0,1133.0,1142.0,1156.0,1167.0,1174.0,1180.0,1184.0,\
                         1186.0,1188.0,1190.0,1191.0,1192.0,1193.0,1193.0,1194.0,\
                         1194.0,1194.0,1194.0,1195.0,1195.0,1195.0,1195.0,1195.0,\
                         1195.0,1195.0,1195.0,1196.0])

   def returnConditions(self,hcm):

      h = hcm / 1.0e5

      if (h <= 120.0):
         arg  = (h / 2.0) + 1.0
         iarg = math.floor(arg)
   
         i = min(max(iarg,1),60)
   
         x = (h - 2.0*(i - 1))/2.0
   
         rho  = self.rhoa_blo120[i] * (self.rhoa_blo120[i+1] / self.rhoa_blo120[i])**x
   
         hs   = self.hsa_blo120[i]   + (self.hsa_blo120[i+1] - self.hsa_blo120[i]  ) * x
         temp = self.tempa_blo120[i] + (self.tempa_blo120[i+1] - self.tempa_blo120[i]) * x
      else:
         if (h < 800.0):
            if (h < 300.0):
               i = max(int(((h - 120.0)/10.0)) + 1,1)
               x = (h - (120.0 + 10.0 * (i-1)))/10.0
            else:
               i = math.floor(((h - 300.0)/20.0)) + 19
               x = (h - (300.0 + 20.0 * (i-19))) / 20.0
      
            rho  = self.rhoa_abv120[i] * (self.rhoa_abv120[i+1]/self.rhoa_abv120[i])**x
            hs   = self.hsa_abv120[i] + (self.hsa_abv120[i+1] - self.hsa_abv120[i]) * x
            temp = self.tempa_abv120[i] + (self.tempa_abv120[i+1] - self.tempa_abv120[i]) * x
         else:
            rho  = self.rhoa_abv120[44] * (800.0/h)**self.thePower_abv120
            hs   = h / self.thePower_abv120
            temp = self.tempa_abv120[44]
   
#  simple conversion to compute speed of sound
   
      rho   = rho * 1000.0
      sos   = 18.3194913 * np.sqrt(temp)
      press = 287.003063 * rho * temp
      visc  = 1.458e-6 * temp**1.5 / (temp + 110.4)
      visck = visc / rho
      fmp   = 7.5474678196e-8 / rho
      g     = 9.08665 * (6378.137 / (6378.137 + h))**2

#      return (temp,press,rho,sos,visc,visck,fmp,g,hs)

      rho = rho / 1000.0

      return (rho)
